= YAMLCalc

++++++
<img src="icon.png" align="right"/>
++++++

YAMLCalc is a spreadsheet alternative that beautifully blends YAML and Python, to allow computations to be performed on data stored in YAML format.

== Installing

Clone the repo and install using pip.

------
$ git clone https://github.com/zilogic-systems/yamlcalc.git
$ pip install --user yamlcalc
------

== Usage

=== Hello YAMLCalc

The top level element of the YAML file should be a map. If a string in the document starts with an `=` then it is interpreted as a Python expression and is evaluated.

[options="header",cols="50a,50a"]
|======
| Input                    | Output
|

[source,yaml]
------
a: 5
b: 6
c: = 1 + 2
------

|

[source,yaml]
------
a: 5
b: 6
c: 3
------

|======

=== Variables

The keys of the top level dict can be used as variable names within Python expressions. They expand to their corresponding values in the YAML document.

[options="header",cols="50a,50a"]
|======
| Input                    | Output
|

[source,yaml]
------
a: 5
b: 6
c: = a + b
------

|

[source,yaml]
------
a: 5
b: 6
c: 11
------

|======

=== List Data Type

If the value of a variable is a list, list operations can be performed on them.

[options="header",cols="50a,50a"]
|======
| Input                    | Output
|

[source,yaml]
------
a:
  - 1
  - 2
  - 3
  - 4
b: = a[1]
c: = sum(a)
------

|

[source,yaml]
------
a:
  - 1
  - 2
  - 3
  - 4
b: 2
c: 10
------

|======

TIP: All Python standard built-ins are available within expressions.

=== Dict Data Type

If the value is a dictionary, dictionary operations can be performed, as expected. In addition, the keys in the mapping can be accessed using object attribute access notation.

[options="header",cols="50a,50a"]
|======
| Input                    | Output
|

[source,yaml]
------
a:
  x: 10
  y: 20
  z: 30
b: = a["z"]
c: = a.y
------

|

[source,yaml]
------
a:
  x: 10
  y: 20
  z: 30
b: 30
c: 20
------

|======

=== Constructing Lists and Dicts

The result of the expressions are not restricted to scalar values, it could also be a list / dict returned from functions or generator expressions.

[options="header",cols="50a,50a"]
|======
| Input                    | Output
|

[source,yaml]
------
a: = range(3)
b: = [i * 2 for i in a]
c: = list(sorted(a), reverse=True)
------

|

[source,yaml]
------
a:
  - 1
  - 2
  - 3
b:
  - 2
  - 4
  - 6
c:
  - 3
  - 2
  - 1
------

|======


== TODO

  * Add support for multiple views.
  * Add support for proper propogation of errors.
  * Add better support for validation of view types and chart types.
  * Add better support for error reporting.

== Credits
Thanks to http://www.artistsvalley.com/[ArtistsValley] for the abacus icon: http://www.iconspedia.com/icon/abacus-icon-26575.html
